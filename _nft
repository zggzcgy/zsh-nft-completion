#compdef nft

#
# Copyright (c) 2023 Chen <zggzcgy@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is based on nftables v1.0.6

local -a subcmd_number
subcmd_number=(/$'[0-9]##\0'/ ':number:decimal number:( )')

local -a subcmd_string
subcmd_string=(/$'[^\0]##\0'/ ':string:arbitrary string:_value"')

local -a subcmd_files
subcmd_files=(/$'[^\0]##\0'/ ':file:file name:_files')

local -a subcmd_ipaddr
subcmd_ipaddr=(
  /$'(<->(.<->(.<->(.<->|)|)|)|[:[:xdigit]]#:[:[:xdigit:]]#)(|/<->)\0'/
  ':ipaddress:IP address (v4 or v6) with optional /<network-prefix-length>:( )'
)

_nftf_ct_value(){
  local -a values=( new established related invalid )
  _describe 'state' values -M 'm:{[:lower:]}={[:upper:]}'
}

local -a subcmd_ipport
_regex_words ip-port "ip port" \
  'dport:TCP protocol:$subcmd_number' \
  'sport:UDP protocol:$subcmd_number'
subcmd_ipport=("$reply[@]")

local -a subcmd_ipprotocol
_regex_words ip-protocol "ip protocol" \
  'tcp:TCP protocol:$subcmd_ipport' \
  'udp:UDP protocol:$subcmd_ipport' \
  'icmp:ICMP protocol'
subcmd_ipprotocol=("$reply[@]")

subcmd_ct_state=( /$'[^\0]#\0'/ ':ct:ct state:_nftf_ct_value')

local -a subcmd_dev net_intf_disp net_intf_list
subcmd_dev=(/"(${(j.|.)net_intf_list})"$'\0'/
	    ':interfaces:network interface:_net_interfaces')

local -a subcmd_meta_interfaces
_regex_words nft-meta "nfttable meta interface" \
  'oif:output interface INDEX:$subcmd_dev' \
  'iif:input interface INDEX:$subcmd_dev' \
  'oifname:output interface NAME:$subcmd_dev' \
  'iifname:input interface NAME:$subcmd_dev'
subcmd_meta_interfaces=("$reply[@]")

local -a subcmd_action
_regex_words nft-subcmd "nfttable action"\
  'accept:accept traffic' \
  'drop:drop traffic' \
  'reject:reject traffic' \
  'log:logging traffic'
subcmd_action=("$reply[@]")

local -a nft_subcommands
nft_subcommands=("(" $subcmd_meta_interfaces "|" "#" ")" $subcmd_action)

local -a subcmd_default_chain
_regex_words default-chain "iptable chain" \
  'input:input chain:$nft_subcommands' \
  'output:output chain' \
  'forward:forward chain' 
subcmd_default_chain=("$reply[@]")

local -a subcmd_default_table
_regex_words default-table "iptable table" \
  'filter:filter tables:$subcmd_default_chain' \
  'mangle:mangle tables:$subcmd_default_chain' \
  'nat:nat tables:$subcmd_default_chain'
subcmd_default_table=("$reply[@]")

#local -a subcmd_output
#subcmd_output=(/$'[^\0]##\0'/ '-j')
local -a subcmd_family
_regex_words nft-family "nfttable family" \
  'ip:IPv4 family:$subcmd_default_table' \
  'ip6:IPv6 family:$subcmd_string' \
  'inet:IPv4 and IPv6:$subcmd_default_table' \
  'arp:ARP address:$subcmd_string' \
  'bridge:bridge addres:$subcmd_string'
subcmd_family=("$reply[@]")

local -a create_cmds
_regex_words create-commands "create commands" \
  'chain:create a chain of table' \
  'flowtable:create a flowtable' \
  'table:create a table'
create_cmds=("$reply[@]")

local -a flush_cmds
_regex_words flush-commands "flush commands" \
  'chain:flush all rules of the specified chain' \
  'map:remove all elements from the specified map' \
  'rule:clear the whole ruleset, including removing all tables and containing objects' \
  'rule:flush all chains and rules of the specified table' \
  'set:remove all elements from the specified set'
flush_cmds=("$reply[@]")

local -a options_cmds
_regex_words options-commands "options command" \
  'chain:specify chain' \
  'table:specify table' \
  'rule:specify rules' \
  'ct:specify ct' \
  'element:specify element' \
  'map:specify map' \
  'counter:specify counter' \
  'flowtable:specify flowtable' \
  'quota:specify quota' \
  'set:specify set'
options_cmds=("$reply[@]")

#
# Global argument handling
#
local -a args reply command
args=(
    # Command word.  Don't care what that is.
    /$'[^\0]#\0'/
)

_regex_words options "nft options" \
  '-h:show help' \
  '--help:show help' \
  '-v:print version information' \
  '--version:print version information' \
  '-f:read input from \<filename\>:$subcmd_files' \
  '--file:read input from \<filename\>:$subcmd_files' \
  '-j:format output in json:$subcmd_number' \
  '--json:format output in json:$subcmd_number' \
  '-e:echo what hae been added, inserted or replaced' \
  '--echo:echo what hae been added, inserted or replaced' \
  '-N:translate IP adddresses to names' \
  '--reversends:translate IP adddresses to names' \
  '-a:output rule handle' \
  '--handle:output rule handle' \
  '-V:show extended version information:( )' \
  '-u:print UID/GID as defined in /etc/passwd and /etc/group' \
  '--guid:print UID/GID as defined in /etc/passwd and /etc/group'
args+=("$reply[@]" "#")

_regex_words commands "nft command" \
  'add:add a table, chain, rule, set, map, or object:$options_cmds' \
  'describe:show information about the type of an expression and its data type' \
  'list:list a ruleset, table, chain, set, map, or object:$options_cmds' \
  'flush:flush (delete everything from) a ruleset, table, chain, set, or map:$flush_cmds' \
  'delete:delete a table, chain, rule, set, element, map, or object:$options_cmds' \
  'create:similar to add but returns an error for existing chain:$create_cmds' \
  'rename:rename the specified chain' \
  'insert:similar to the add command, but the rule is prepended to the beginning of the chain or before the rule at the given position' \
  'replace:similar to the add command, but replaces the specified rule:$options_cmds' \
  'reset:list-and-reset stateful object' \
  'monitor:listen to Netlink events'
args+=("$reply[@]")


_regex_arguments _nft "${args[@]}"

_nft "$@"
